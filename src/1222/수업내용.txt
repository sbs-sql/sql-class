-- 12월 22일
-- 자주 사용하는 문자열 함수
-- concat : 문자를 합쳐주는 함수
-- 사원이름 옆에 님이 붙어져 출력
select concat(ename,'님') from emp
-- 테이블 생성
-- select, delete, update, insert (DML)
-- create, drop, alter (DDL)
-- create: 테이블 생성, drop: 테이블 삭제, alter : 테이블 수정
-- 책은 217p ~ 
-- commit (TCL)
-- DML(insert, delete, update)다음엔 commit
-- 1. insert into emp(empno, ename) values(9000,'홍길동')
-- 2. commit (최종 저장), commit 입력하지 x -> insert x
-- *****지금까지 commit을 사용하지 않고 데이터가 저장,삭제,수정 되었던 이유
-- 디비버같은 프로그램(SQL 편집기)은 자동으로 auto commit이 설정되어 있음.
-- 여러분들이 회사나 학교에서 실수를 방지하고 싶으면 ***auto commit을 해제 해야함.

-- DDL (CREATE, ALTER, DROP) COMMIT을 하지않아도 됨. -> 바로 저장됨
-- DDL은 COMMIT에 영향을 받지 않는다.

-- 테이블 생성
-- 테이블이름이 x 생성
-- varchar(30) : (30) -> 30글자 제한
create table x(
	empno int comment '사원번호',
	ename varchar(30) comment '사원이름'
)
-- auto_increment : 자동증가
-- primary key : 데이터 중복 방지 (PK)
create table y(
	deptno int auto_increment primary key comment '부서번호',
	dname varchar(50) comment '부서이름'
)
insert into y(deptno, dname) values(1, '영업부서')
insert into y(deptno, dname) values(2, '기술지원팀')
-- primary key로 설정된 deptno 컬럼은 값이 중복 될 수 없다.

-- 테이블 삭제
-- x,y 테이블 삭제
drop table x 
drop table y
-- 참조키를 넣어서 테이블 생성해보기
-- 참조키 혹은 외래키(*****FK)는 테이블간에 관계를 맺어준다.
create table y(
	deptno int primary key comment '부서번호',
	dname varchar(20) comment '부서이름'
)
create table x(
	empno int primary key comment '사원번호',
	ename varchar(30) comment '사원이름',
	deptno int comment '부서번호',
	foreign key (deptno) references y(deptno)
)

insert into y(deptno, dname) values(1, '영업부서')
insert into y(deptno, dname) values(2, '기술지원팀')

insert into x(empno, ename) values(100, '홍길동')
insert into x(empno, ename) values(200, '박길동')
-- x테이블에 deptno가 null이 들어가 있음.
-- 즉, FK는 NULL허용이 가능하다. PK는 NULL를 허용하지 않는다.

-- 문제, 사원번호가 100인 사원에 부서번호를 1번, 200번인 사원에 부서번호를 2번으로 
-- 수정하시오
update x
set deptno = 1
where empno = 100;

update x
set deptno = 2
where empno = 200;

insert into y(deptno, dname) values(3, 'SALES')

-- 부서번호 1번 삭제하기
delete from y where deptno = 1;
delete from y where deptno = 2;
-- 부서번호 3번 삭제하기
delete from y where deptno = 3;

-- ***** on delete 설정때문에 1번과 2번은 삭제될 수 없다.
-- FK가 설정되는 순간 데이터 삭제는 까다롭다.
-- x테이블에 있는 deptno가 1,2번임
-- 1번 2번 deptno는 현재 사용중이기 때문에 삭제할 수 없음.
 
-- 200번 사원 부서번호 2번에서 1번으로 수정
update x
set deptno = 1
where empno = 200;
-- y테이블에서 2번 부서 삭제해보시오
delete from y where deptno = 2;
-- x테이블에서 2번 부서를 사용하는 사원이 없으므로 2번 부서 삭제 가능!
-- FK(참조키)는 테이블간 데이터를 엄격하게 다룬다. 이는 관계형 데이터베이스를 사용하는 이유 중 하나다.
-- MYSQL(관계형 데이터베이스 중 하나인 제품)

-- 사용중이어도 삭제를 할 수있게 설정하기. ***** on delete *****cascade
drop table x
drop table y


create table y(
	deptno int primary key comment '부서번호',
	dname varchar(20) comment '부서이름'
)
create table x(
	empno int primary key comment '사원번호',
	ename varchar(30) comment '사원이름',
	deptno int comment '부서번호',
	foreign key (deptno) references y(deptno) on delete cascade
)

insert into y(deptno, dname) values(1, '영업부서')
insert into y(deptno, dname) values(2, '기술지원팀')


insert into x(empno, ename, deptno) values(100, '홍길동', 1)
insert into x(empno, ename, deptno) values(200, '박길동', 2)

delete from y where deptno = 2;

-- **** 면접 단골 on delete cascade
-- 부모테이블은 dept 자식테이블은 emp 구조를 가지게 됨.
-- on delete : 부모 테이블에서 삭제 이벤트가 발생하면 자식 테이블 데이터에 이벤트 발생
-- on update : 부모 테이블에서 수정 이벤트가 발생하면 자식 테이블 데이터에 이벤트 발생

-- 이벤트 종류
-- 1. cascade : 자식 테이블 데이터 삭제 or 수정
-- 2. set null : 자식 테이블 데이터 null 업데이트
-- 3. set default : 자식 테이블 데이터 default 값으로 변경
-- 4. restrict(default) : 자식 테이블에서 데이터 사용중일 때 삭제 or 수정 불가능 (기본값)
-- 5. no action : 자식 테이블 데이터는 변경되지 않는다.
-- 4번 부서 추가
insert into y(deptno, dname) values(4,'dev')
-- 사원 추가
insert into x(empno, ename, deptno) values (400,'KING',4)
delete from y where deptno = 4
-- on delete cascade로 설정되어 있기 때문에 4번부서를 가진 사원도 삭제됨~!

-- 1:N, M:N, 1:1 관계
-- emp테이블과 dept테이블 관계를 1:N관계
-- 여러명의 사원(N)이 한개 부서(1)에 소속될 수 있기 때문

-- 문제) 주제는 영화, 1:N관계를 가지는 테이블 2개를 만들어보세오. 
-- 영화테이블, 배우테이블
drop table movie 

create table movie (
	movie_id int primary key comment '영화 고유아이디',
	movie_name varchar(100) comment '영화 이름',
	genre varchar(50) comment '영화 장르',
	create_at timestamp default current_timestamp comment '개봉날짜'
)

create table actor(
	actor_id int primary key comment '배우 고유아이디',
	actor_name varchar(50) comment '배우 이름',
	movie_id int comment '영화 고유아이디',
	foreign key (movie_id) references movie(movie_id) on delete no action
)

insert into movie (movie_id, movie_name, genre) values(1, 'Avengers', 'action')

insert into actor (actor_id, actor_name, movie_id) values (1, 'Chris Evans', 1)
insert into actor (actor_id, actor_name, movie_id) values (2, 'Robert Downey', 1)
insert into actor (actor_id, actor_name, movie_id) values (3, 'Mark Ruffalo', 1)
insert into actor (actor_id, actor_name, movie_id) values (4, 'Scarlett Johansson', 1)
-- 문제) 어벤져스에 출현한 영화 배우 이름, 배우 아이디 조회하는 SQL문 작성.
select 
	a.actor_name,
	a.actor_id 
from movie as m
inner join actor as a
on m.movie_id = a.movie_id 
where m.movie_name = 'Avengers'

-- alter 테이블 수정
alter table movie add column actor_id int comment '배우 아이디';

insert into movie (movie_id, movie_name, genre, actor_id) 
values(2, 'Avengers-endgame', 'action', 3)
-- 문제) *****오류나는 이유?
-- movie_id <- PK
-- N(배우) : 1(영화) 관계

-- moive_id가 아닌 actor_id로 조인하기
-- join은 데이터타입만 같으면 가능해요.
-- 테이블 생성할 때 foreign key를 설정하지 않아도 조인은 가능하다!

-- foreign key를 설정 join.
-- 장점) 테이블 관계를 파악하기가 쉽다. 
-- 단점) 데이터를 삭제&수정 하는데 제약사항이 있다. on delete 같은 걸 성정해야함...

-- foreign key없이 join. (데이터타입만 같다면 join이 됨) <- 대형 프로젝트에서 종종 이런식으로 운영함..
-- 장점) 데이터를 쉽게 삭제&수정할 수 있다.
-- 단점) 테이블 관계를 파악하기 어렵다.
select 
	m.movie_name,
	a.actor_name 
from movie as m
inner join actor as a
on m.actor_id = a.actor_id 

-- ***M:N 관계 테이블 생성하기
문제 ) 대표 금요일씨는 사업을 확장하기 위해
여러대 법인 차를 구매했습니다. 
하지만, 위 테이블 구조는 문제가 있습니다.
한 회사가 여러 법인 차를 구매할 수 있도록 테이블을 수정해보세요.

1. 한 테이블에 컬럼이 많으면 성능저하로 이어짐.
2. 테이블을 객체라고 생각하자.

문제 ) 주제 : 프리 
M:N관계를 가지는 테이블 3개 이하로 작성

-- 가장 대표적으로 사용하는 1:N 관계
1. 사원, 부서
2. 팀, 선수
-- 가장 대표적으로 사용하는 M:N관계
1. 학생, 과목, 수강
2. 회원, 물품, 구매이력

-- 조회수가 가장 많은 중고거래 게시판의 첨부파일 조회하기
select 
    CONCAT('/home/grep/src/',
           ugb.BOARD_ID,
           '/',
           ugf.FILE_ID,
           ugf.FILE_NAME,
           ugf.FILE_EXT
          ) AS 'FILE_PATH'
from USED_GOODS_FILE AS ugf
inner join USED_GOODS_BOARD AS ugb
ON ugf.BOARD_ID = ugb.BOARD_ID
where ugb.VIEWS = (select MAX(views) from USED_GOODS_BOARD)
order by ugf.FILE_ID desc

-- 조건에 맞는 사용자와 총 거래금액 조회하기
SELECT 
    ugu.USER_ID,
    ugu.NICKNAME,
    ugb.TOTAL_SALES
FROM (
    SELECT
        WRITER_ID,
        SUM(PRICE) AS 'TOTAL_SALES'
    FROM USED_GOODS_BOARD
    WHERE STATUS = 'DONE'
    GROUP BY WRITER_ID
    HAVING SUM(PRICE) >= 700000
) AS ugb
INNER JOIN USED_GOODS_USER  AS ugu
ON ugb.WRITER_ID = ugu.USER_ID
ORDER BY 3 ASC